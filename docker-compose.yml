services:
  db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_DB: gutendex
      POSTGRES_USER: gutendex
      POSTGRES_PASSWORD: gutendex_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gutendex"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  app:
    build:
      context: .
      dockerfile: app.Dockerfile
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ALLOWED_HOSTS=localhost,127.0.0.1,app
      - DATABASE_HOST=db
      - DATABASE_NAME=gutendex
      - DATABASE_USER=gutendex
      - DATABASE_PASSWORD=gutendex_password
      - DATABASE_PORT=5432
      - SECRET_KEY=change_me_in_production
      - STATIC_ROOT=/app/staticfiles
      - MEDIA_ROOT=/app/media
      - ADMIN_EMAILS=admin@example.com
      - ADMIN_NAMES=Admin
      - MANAGER_EMAILS=manager@example.com
      - MANAGER_NAMES=Manager
      - EMAIL_HOST=none
      - EMAIL_HOST_ADDRESS=none
      - EMAIL_HOST_USER=none
      - EMAIL_HOST_PASSWORD=none
      - DEBUG=true
      - ALLOWED_HOSTS=localhost,127.0.0.1,nginx 
    volumes:
      - gutendex_data:/app/catalog_files/tmp
    expose: 
      - 8000
    networks:
      - frontend_network
      - backend_network

  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/static # include catalog files as well
    ports:
      - 80:80
    depends_on:
      - app
    networks:
      - frontend_network

networks:
  backend_network:
  frontend_network:

volumes:
  postgres_data:
  gutendex_data: